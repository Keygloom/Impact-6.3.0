{%- assign line_item_variant = line_item.variant | default: line_item -%}
{%- assign line_item_product = line_item.product | default: line_item.variant.product -%}

<div class="line-item" data-line-item-key="{{ line_item.key }}">
  <div class="h-stack gap-4">
    <div class="line-item__media">
      {%- if line_item_variant.image != blank -%}
        <img 
          src="{{ line_item_variant.image | image_url: width: 140 }}"
          alt="{{ line_item_variant.image.alt | escape }}"
          width="70"
          height="auto"
          loading="lazy"
          class="line-item__image"
        >
      {%- else -%}
        {{ 'product-1' | placeholder_svg_tag: 'line-item__image placeholder' }}
      {%- endif -%}
    </div>

    <div class="line-item__info v-stack gap-2 grow">
      <div>
        <a href="{{ line_item_product.url }}" class="line-item__title h6">
          {{ line_item_product.title | escape }}
        </a>
        
        {%- unless line_item_product.has_only_default_variant -%}
          <div class="text-sm text-subdued">
            {%- for option in line_item.variant.options -%}
              <span>{{ option }}</span>
              {%- unless forloop.last -%} / {%- endunless -%}
            {%- endfor -%}
          </div>
        {%- endunless -%}

        {%- if line_item.selling_plan_allocation -%}
          <div class="text-sm text-subdued">
            {{ line_item.selling_plan_allocation.selling_plan.name | escape }}
          </div>
        {%- endif -%}
      </div>

      <div class="line-item__price-section">
        <div class="h-stack gap-2 items-center flex-wrap">
          {%- if line_item_variant.compare_at_price > line_item_variant.price -%}
            {%- assign savings = line_item_variant.compare_at_price | minus: line_item_variant.price -%}
            
            <span class="line-item__sale-price" style="color: #10b981; font-weight: 600; font-size: 16px;">
              {{ line_item.final_price | money }}
            </span>
            
            <span class="line-item__compare-price" style="text-decoration: line-through; color: #9ca3af; font-size: 14px;">
              {{ line_item_variant.compare_at_price | money }}
            </span>
            
            <span class="line-item__save-badge" style="
              background-color: #10B981;
              color: white;
              padding: 2px 6px;
              border-radius: 8px;
              font-size: 11px;
              font-weight: 600;
              white-space: nowrap;
            ">
              SAVE {{ savings | money }}
            </span>
          {%- else -%}
            <span class="line-item__regular-price" style="font-weight: 600; font-size: 16px;">
              {{ line_item.final_price | money }}
            </span>
          {%- endif -%}
        </div>
      </div>

      <div class="line-item__quantity">
        <div class="quantity-selector" data-line-key="{{ line_item.key }}">
          <button type="button" class="quantity-selector__button quantity-decrease" aria-label="Diminuer">
            {%- render 'icon' with 'minus', width: 12, height: 12 -%}
          </button>
          <input 
            type="number" 
            class="quantity-selector__input"
            value="{{ line_item.quantity }}" 
            min="0"
            readonly
          >
          <button type="button" class="quantity-selector__button quantity-increase" aria-label="Augmenter">
            {%- render 'icon' with 'plus', width: 12, height: 12 -%}
          </button>
        </div>
      </div>
    </div>

    <div class="line-item__remove">
      <button type="button" class="line-item__remove-button" data-line-key="{{ line_item.key }}" aria-label="Retirer">
        {%- render 'icon' with 'trash', width: 14, height: 14 -%}
      </button>
    </div>
  </div>
</div>

<style>
  .line-item {
    padding: 1rem 0;
    border-bottom: 1px solid rgba(0, 0, 0, 0.08);
  }

  .line-item:last-child {
    border-bottom: none;
  }

  .line-item__media {
    flex-shrink: 0;
  }

  .line-item__image {
    width: 70px;
    height: auto;
    object-fit: cover;
    border-radius: 8px;
  }

  .line-item__title {
    color: inherit;
    text-decoration: none;
    font-weight: 500;
  }

  .line-item__title:hover {
    text-decoration: underline;
  }

  .quantity-selector {
    display: inline-flex;
    align-items: stretch;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    overflow: hidden;
    background: white;
    height: 36px;
  }

  .quantity-selector.loading {
    opacity: 0.6;
    pointer-events: none;
  }

  .quantity-selector__button {
    background: white;
    border: none;
    padding: 0 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
    flex-shrink: 0;
    min-width: 36px;
  }

  .quantity-selector__button:hover:not(:disabled) {
    background-color: #f3f4f6;
  }

  .quantity-selector__button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .quantity-selector__input {
    width: 45px;
    text-align: center;
    border: none;
    border-left: 1px solid #e5e7eb;
    border-right: 1px solid #e5e7eb;
    padding: 0 4px;
    font-size: 14px;
    background: white;
    -moz-appearance: textfield;
    height: 100%;
    line-height: 36px;
  }

  .quantity-selector__input::-webkit-inner-spin-button,
  .quantity-selector__input::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .line-item__remove-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    color: #6b7280;
    transition: color 0.2s;
  }

  .line-item__remove-button:hover {
    color: #ef4444;
  }

  @media (max-width: 640px) {
    .line-item__image {
      width: 60px;
    }
    
    .quantity-selector {
      height: 32px;
    }

    .quantity-selector__button {
      padding: 0 10px;
      min-width: 32px;
    }

    .quantity-selector__input {
      width: 40px;
      line-height: 32px;
    }
  }
</style>

<script>
(function() {
  // Prevent multiple initializations
  if (window.cartUpdateInitialized) return;
  window.cartUpdateInitialized = true;

  // Debounce function to prevent multiple rapid clicks
  let updateTimeout;
  
  async function updateCartQuantity(lineKey, newQuantity) {
    clearTimeout(updateTimeout);
    
    return new Promise((resolve) => {
      updateTimeout = setTimeout(async () => {
        try {
          // Lock checkout button
          const checkoutBtn = document.querySelector('[name="checkout"], .cart-drawer__checkout, button[type="submit"]');
          if (checkoutBtn) {
            checkoutBtn.disabled = true;
            checkoutBtn.style.opacity = '0.6';
            checkoutBtn.style.cursor = 'not-allowed';
          }
          
          // Update cart via Shopify API
          const response = await fetch('/cart/change.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              id: lineKey,
              quantity: newQuantity
            })
          });

          if (!response.ok) throw new Error('Update failed');
          
          const cart = await response.json();
          
          // Update the page content with selective update
          await updateCartDisplay();
          
          // Trigger custom event
          document.dispatchEvent(new CustomEvent('cart:updated', { 
            detail: { cart, itemCount: cart.item_count } 
          }));
          
          resolve(cart);
        } catch (error) {
          console.error('Cart update error:', error);
          alert('Erreur lors de la mise à jour du panier');
          
          // Unlock checkout button on error
          const checkoutBtn = document.querySelector('[name="checkout"], .cart-drawer__checkout, button[type="submit"]');
          if (checkoutBtn) {
            checkoutBtn.disabled = false;
            checkoutBtn.style.opacity = '1';
            checkoutBtn.style.cursor = 'pointer';
          }
          
          resolve(null);
        }
      }, 300);
    });
  }

  async function updateCartDisplay() {
    try {
      // Fetch updated cart section
      const response = await fetch('/?section_id=cart-drawer');
      const html = await response.text();
      
      const parser = new DOMParser();
      const newDoc = parser.parseFromString(html, 'text/html');
      
      const currentCartDrawer = document.querySelector('cart-drawer');
      
      if (!currentCartDrawer) {
        console.log('Cart drawer not found, reloading page...');
        location.reload();
        return;
      }
      
      // 1. Mise à jour du footer (prix total, sous-total, etc.)
      const newFooter = newDoc.querySelector('[slot="footer"]');
      const currentFooter = currentCartDrawer.querySelector('[slot="footer"]');
      
      if (newFooter && currentFooter) {
        // Utiliser replaceWith au lieu de innerHTML pour forcer le rechargement complet
        const newFooterClone = newFooter.cloneNode(true);
        currentFooter.replaceWith(newFooterClone);
        console.log('Footer with checkout button updated');
      }
      
      // 2. Mise à jour du count bubble
      const newCount = newDoc.querySelector('cart-count');
      const currentCount = currentCartDrawer.querySelector('cart-count');
      
      if (newCount && currentCount) {
        currentCount.textContent = newCount.textContent;
        console.log('Count updated to:', newCount.textContent);
      }
      
      console.log('Cart display updated successfully');
      
    } catch (error) {
      console.error('Display update error:', error);
      location.reload();
    }
  }

  // Event delegation for all cart buttons
  document.addEventListener('click', async function(e) {
    const decreaseBtn = e.target.closest('.quantity-decrease');
    const increaseBtn = e.target.closest('.quantity-increase');
    const removeBtn = e.target.closest('.line-item__remove-button');
    
    if (decreaseBtn || increaseBtn) {
      e.preventDefault();
      e.stopPropagation();
      
      const button = decreaseBtn || increaseBtn;
      const selector = button.closest('.quantity-selector');
      const input = selector.querySelector('.quantity-selector__input');
      const lineKey = selector.dataset.lineKey;
      const currentQty = parseInt(input.value) || 0;
      const newQty = decreaseBtn ? Math.max(0, currentQty - 1) : currentQty + 1;
      
      // Add loading state
      selector.classList.add('loading');
      
      // Update input value immediately for visual feedback
      input.value = newQty;
      
      // Update cart
      const result = await updateCartQuantity(lineKey, newQty);
      
      // Remove loading state
      selector.classList.remove('loading');
      
      // If item was removed (quantity = 0), remove the line item
      if (newQty === 0 && result) {
        const lineItem = selector.closest('.line-item');
        if (lineItem) {
          lineItem.style.opacity = '0';
          lineItem.style.transition = 'opacity 0.3s';
          setTimeout(() => lineItem.remove(), 300);
        }
      }
    }
    
    if (removeBtn) {
      e.preventDefault();
      e.stopPropagation();
      
      const lineKey = removeBtn.dataset.lineKey;
      removeBtn.style.opacity = '0.5';
      removeBtn.style.pointerEvents = 'none';
      
      await updateCartQuantity(lineKey, 0);
    }
  });
})();
</script>