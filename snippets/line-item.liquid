{%- assign line_item_variant = line_item.variant | default: line_item -%}
{%- assign line_item_product = line_item.product | default: line_item.variant.product -%}

<div class="line-item" data-line-item-key="{{ line_item.key }}">
  <div class="h-stack gap-4">
    <div class="line-item__media">
      {%- if line_item_variant.image != blank -%}
        <img 
          src="{{ line_item_variant.image | image_url: width: 140 }}"
          alt="{{ line_item_variant.image.alt | escape }}"
          width="70"
          height="auto"
          loading="lazy"
          class="line-item__image"
        >
      {%- else -%}
        {{ 'product-1' | placeholder_svg_tag: 'line-item__image placeholder' }}
      {%- endif -%}
    </div>

    <div class="line-item__info v-stack gap-2 grow">
      <div>
        <a href="{{ line_item_product.url }}" class="line-item__title h6">
          {{ line_item_product.title | escape }}
        </a>
        
        {%- unless line_item_product.has_only_default_variant -%}
          <div class="text-sm text-subdued">
            {%- for option in line_item.variant.options -%}
              <span>{{ option }}</span>
              {%- unless forloop.last -%} / {%- endunless -%}
            {%- endfor -%}
          </div>
        {%- endunless -%}

        {%- if line_item.selling_plan_allocation -%}
          <div class="text-sm text-subdued">
            {{ line_item.selling_plan_allocation.selling_plan.name | escape }}
          </div>
        {%- endif -%}
      </div>

      <div class="line-item__price-section">
        <div class="h-stack gap-2 items-center flex-wrap">
          {%- if line_item_variant.compare_at_price > line_item_variant.price -%}
            {%- assign savings = line_item_variant.compare_at_price | minus: line_item_variant.price -%}
            {%- assign savings_percentage = savings | times: 100.0 | divided_by: line_item_variant.compare_at_price | round -%}
            
            <span class="line-item__sale-price" style="color: #10b981; font-weight: 600; font-size: 16px;">
              {{ line_item.final_price | money }}
            </span>
            
            <span class="line-item__compare-price" style="text-decoration: line-through; color: #9ca3af; font-size: 14px;">
              {{ line_item_variant.compare_at_price | money }}
            </span>
            
            <span class="line-item__save-badge" style="
              background-color: #10B981;
              color: white;
              padding: 2px 6px;
              border-radius: 8px;
              font-size: 11px;
              font-weight: 600;
              white-space: nowrap;
            ">
              SAVE {{ savings | money }}
            </span>
          {%- else -%}
            <span class="line-item__regular-price" style="font-weight: 600; font-size: 16px;">
              {{ line_item.final_price | money }}
            </span>
          {%- endif -%}
        </div>

        {%- if line_item.line_level_discount_allocations.size > 0 -%}
          <div class="line-item__discounts text-sm">
            {%- for discount_allocation in line_item.line_level_discount_allocations -%}
              <div class="badge badge--discount">
                {%- render 'icon' with 'discount', width: 12, height: 12 -%}
                <span>{{ discount_allocation.discount_application.title }}</span>
                <span>(-{{ discount_allocation.amount | money }})</span>
              </div>
            {%- endfor -%}
          </div>
        {%- endif -%}
      </div>

      <div class="line-item__quantity">
        <div class="quantity-selector" data-line-key="{{ line_item.key }}">
          <button type="button" class="quantity-selector__button quantity-decrease" aria-label="{{ 'cart.general.decrease_quantity' | t }}">
            {%- render 'icon' with 'minus', width: 12, height: 12 -%}
          </button>
          <input 
            type="number" 
            class="quantity-selector__input quantity-input"
            value="{{ line_item.quantity }}" 
            min="0"
            aria-label="{{ 'cart.general.quantity' | t }}"
            readonly
          >
          <button type="button" class="quantity-selector__button quantity-increase" aria-label="{{ 'cart.general.increase_quantity' | t }}">
            {%- render 'icon' with 'plus', width: 12, height: 12 -%}
          </button>
        </div>
      </div>
    </div>

    <div class="line-item__remove">
      <button type="button" class="line-item__remove-button cart-remove-btn" data-line-key="{{ line_item.key }}" aria-label="{{ 'cart.general.remove' | t }}">
        {%- render 'icon' with 'trash', width: 14, height: 14 -%}
      </button>
    </div>
  </div>
</div>

<style>
  .line-item {
    padding: 1rem 0;
    border-bottom: 1px solid rgba(0, 0, 0, 0.08);
  }

  .line-item:last-child {
    border-bottom: none;
  }

  .line-item__media {
    flex-shrink: 0;
  }

  .line-item__image {
    width: 70px;
    height: auto;
    object-fit: cover;
    border-radius: 8px;
  }

  .line-item__title {
    color: inherit;
    text-decoration: none;
    font-weight: 500;
  }

  .line-item__title:hover {
    text-decoration: underline;
  }

  .quantity-selector {
    display: inline-flex;
    align-items: center;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    position: relative;
  }

  .quantity-selector.loading {
    opacity: 0.6;
    pointer-events: none;
  }

  .quantity-selector__button {
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
  }

  .quantity-selector__button:hover:not(:disabled) {
    background-color: #f3f4f6;
  }

  .quantity-selector__button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .quantity-selector__input {
    width: 40px;
    text-align: center;
    border: none;
    padding: 0.25rem;
    font-size: 14px;
    background: transparent;
  }

  .quantity-selector__input::-webkit-inner-spin-button,
  .quantity-selector__input::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .line-item__remove-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    color: #6b7280;
    transition: color 0.2s;
  }

  .line-item__remove-button:hover {
    color: #ef4444;
  }

  @media (max-width: 640px) {
    .line-item__image {
      width: 60px;
    }
    
    .line-item__save-badge {
      font-size: 10px !important;
      padding: 2px 4px !important;
    }
  }
</style>

<script>
(function() {
  // Éviter les initialisations multiples
  if (window.lineItemHandlersInitialized) return;
  window.lineItemHandlersInitialized = true;

  // Fonction pour mettre à jour le panier
  async function updateCart(lineKey, quantity) {
    try {
      const response = await fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: lineKey,
          quantity: quantity
        })
      });

      if (!response.ok) throw new Error('Erreur lors de la mise à jour');

      const cart = await response.json();
      
      // Recharger le contenu du cart drawer
      const cartDrawerResponse = await fetch('/?section_id=cart-drawer');
      const html = await cartDrawerResponse.text();
      
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const newCartDrawer = doc.querySelector('cart-drawer');
      
      if (newCartDrawer) {
        const currentCartDrawer = document.querySelector('cart-drawer');
        if (currentCartDrawer) {
          currentCartDrawer.innerHTML = newCartDrawer.innerHTML;
          
          // Déclencher un événement personnalisé pour notifier d'autres scripts
          document.dispatchEvent(new CustomEvent('cart:updated', { detail: cart }));
        }
      }

      return cart;
    } catch (error) {
      console.error('Erreur mise à jour panier:', error);
      alert('Une erreur est survenue. Veuillez réessayer.');
    }
  }

  // Gestionnaire de quantité
  document.addEventListener('click', async function(e) {
    const decreaseBtn = e.target.closest('.quantity-decrease');
    const increaseBtn = e.target.closest('.quantity-increase');
    const removeBtn = e.target.closest('.cart-remove-btn');

    // Bouton diminuer
    if (decreaseBtn) {
      e.preventDefault();
      const selector = decreaseBtn.closest('.quantity-selector');
      const input = selector.querySelector('.quantity-input');
      const lineKey = selector.dataset.lineKey;
      const currentQty = parseInt(input.value);
      
      selector.classList.add('loading');
      await updateCart(lineKey, currentQty - 1);
      selector.classList.remove('loading');
    }

    // Bouton augmenter
    if (increaseBtn) {
      e.preventDefault();
      const selector = increaseBtn.closest('.quantity-selector');
      const input = selector.querySelector('.quantity-input');
      const lineKey = selector.dataset.lineKey;
      const currentQty = parseInt(input.value);
      
      selector.classList.add('loading');
      await updateCart(lineKey, currentQty + 1);
      selector.classList.remove('loading');
    }

    // Bouton supprimer
    if (removeBtn) {
      e.preventDefault();
      const lineKey = removeBtn.dataset.lineKey;
      
      removeBtn.style.opacity = '0.5';
      removeBtn.style.pointerEvents = 'none';
      await updateCart(lineKey, 0);
    }
  });

  // Mettre à jour le compteur du panier dans le header
  document.addEventListener('cart:updated', function(e) {
    const cart = e.detail;
    const cartCounts = document.querySelectorAll('cart-count, [data-cart-count]');
    
    cartCounts.forEach(counter => {
      counter.textContent = cart.item_count;
    });
  });
})();
</script>